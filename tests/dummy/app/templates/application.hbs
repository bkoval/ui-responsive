<div class="container">
  <h1 id="title">ui-responsive</h1>
  <h2>Responsive tools for your Ember app</h2>

  <div class="row">
    <div id='image-container' class="col-xs-12 col-sm-5 col-md-4 col-lg-3">
      <img src='/images/tomster-construction.png'>
    </div>
    <div class="col-xs-12 col-sm-7 col-md-8 col-lg-9">
      <h3>Resources</h3>
      <ul>
        <li><a href="">GitHub Repo</a></li>
        <li><a href="tests?nocontainer">Unit tests</a></li>
      </ul>
      <p>
        The image to the left has the dimensions of {{foobar.width}} x {{foobar.height}}.
        <br>
        Check the comments about registration to understand how this was achieved.
      </p>
      <h4>Breakpoint Strategy</h4>
      <p>
        Traditional breakpoint strategies resolve the "device category" by looking exclusively at width which works adequately when a portrait display is assumed (as most mobile platforms are viewed in portrait). If, however, you are designing for both portrait and landscape then having the breakpoints go against the "longest edge" gives a better feel for the device category. This information combined with the orientation gives you the tools to really design to the screen real-estate.
      </p>
      <p>
        You can choose between the "traditional" approach (the default) or set the <code>strategy</code> to "oriented" and get orientation-aware measurement.
        <note>
          Note: setting to oriented <i>assumes</i> a aspect ratio of 16:10; this may not be precisely right but it should be more accurate than the traditional strategy. If you want to set it to some other ratio you can just set strategy to a string representation of the form "w:h".
        </note>
      </p>
      <p>
        Strategy:
        {{ui-toggle-button
          on='oriented'
          off='traditional'
          valuesAre='equal'
          value=responsive.strategy
          onToggle=(action 'strategyChanged')
        }}
      </p>
    </div>
  </div>
  <div class="col-xs-12">
    <h3>Responsive Data</h3>
    <div class="row downer">
      <div class="col-xs-3">width:</div>
      <div class="col-xs-9">{{responsive.width}}</div>
    </div>
    <div class="row downer">
      <div class="col-xs-3">height:</div>
      <div class="col-xs-9">{{responsive.height}}</div>
    </div>
    <div class="row downer">
      <div class="col-xs-3">largestSide:</div>
      <div class="col-xs-9">{{responsive.largestSide}}</div>
    </div>
    <div class="row downer">
      <div class="col-xs-3">effectiveSize:</div>
      <div class="col-xs-9">{{responsive.effectiveSize}}</div>
    </div>
    <div class="row downer">
      <div class="col-xs-3">screen:</div>
      <div class="col-xs-9 smaller">{{screenJson}}</div>
    </div>
    <div class="row downer">
      <div class="col-xs-3">body:</div>
      <div class="col-xs-9 smaller">{{bodyJson}}</div>
    </div>
    <div class="row downer">
      <div class="col-xs-3">deviceType:</div>
      <div class="col-xs-9 ">{{responsive.deviceType}}</div>
    </div>
    <div class="row downer">
      <div class="col-xs-12">Flags:</div>
    </div>
    <div class="row downer">
      <div class="col-xs-1"> </div>
      <div class="col-xs-2 smaller">isMobile</div>
      <div class="col-xs-9 smaller">{{responsive.isMobile}}</div>
    </div>
    <div class="row downer">
      <div class="col-xs-1"> </div>
      <div class="col-xs-2 smaller">isTablet</div>
      <div class="col-xs-9 smaller">{{responsive.isTablet}}</div>
    </div>
    <div class="row downer">
      <div class="col-xs-1"> </div>
      <div class="col-xs-2 smaller">isDesktop</div>
      <div class="col-xs-9 smaller">{{responsive.isDesktop}}</div>
    </div>
    <div class="row downer">
      <div class="col-xs-1"> </div>
      <div class="col-xs-2 smaller">isLarge</div>
      <div class="col-xs-9 smaller">{{responsive.isLarge}}</div>
    </div>
    <div class="row downer">
      <div class="col-xs-1"> </div>
      <div class="col-xs-2 smaller">isHuge</div>
      <div class="col-xs-9 smaller">{{responsive.isHuge}}</div>
    </div>
    {{! NEGATIONS }}
    <div class="row downer">
      <div class="col-xs-12">Negations:</div>
    </div>
    <div class="row downer">
      <div class="col-xs-1"> </div>
      <div class="col-xs-3 col-sm-2 smaller">notMobile</div>
      <div class="col-xs-8 col-sm-7 smaller">{{responsive.notMobile}}</div>
    </div>
    <div class="row downer">
      <div class="col-xs-1"> </div>
      <div class="col-xs-3 col-sm-2 smaller">notTablet</div>
      <div class="col-xs-8 col-sm-7 smaller">{{responsive.notTablet}}</div>
    </div>
    <div class="row downer">
      <div class="col-xs-1"> </div>
      <div class="col-xs-3 col-sm-2 smaller">notDesktop</div>
      <div class="col-xs-8 col-sm-7 smaller">{{responsive.notDesktop}}</div>
    </div>
    <div class="row downer">
      <div class="col-xs-1"> </div>
      <div class="col-xs-3 col-sm-2 smaller">notLarge</div>
      <div class="col-xs-8 col-sm-7 smaller">{{responsive.notLarge}}</div>
    </div>
    <div class="row downer">
      <div class="col-xs-1"> </div>
      <div class="col-xs-2 smaller">notHuge</div>
      <div class="col-xs-9 smaller">{{responsive.notHuge}}</div>
    </div>


    {{! GROUPINGS }}
    <div class="row downer">
      <div class="col-xs-12">Groups:</div>
    </div>
    <div class="row downer">
      <div class="col-xs-1"> </div>
      <div class="col-xs-2 smaller"><i>biggerThanTablet</i></div>
      <div class="col-xs-9 smaller">{{responsive.biggerThanTablet}}</div>
    </div>
    <div class="row downer">
      <div class="col-xs-1"> </div>
      <div class="col-xs-2 smaller"><i>biggerThanDesktop</i></div>
      <div class="col-xs-9 smaller">{{responsive.biggerThanDesktop}}</div>
    </div>
    <div class="row downer">
      <div class="col-xs-1"> </div>
      <div class="col-xs-2 smaller"><i>smallerThanDesktop</i></div>
      <div class="col-xs-9 smaller">{{responsive.smallerThanDesktop}}</div>
    </div>

    {{! ORIENTATION }}
    <div class="row downer">
      <div class="col-xs-12">Orientation:</div>
    </div>
    <div class="row downer">
      <div class="col-xs-1"> </div>
      <div class="col-xs-2 smaller"><i>isPortrait</i></div>
      <div class="col-xs-9 smaller">{{responsive.isPortrait}}</div>
    </div>
    <div class="row downer">
      <div class="col-xs-1"> </div>
      <div class="col-xs-2 smaller"><i>isLandscape</i></div>
      <div class="col-xs-9 smaller">{{responsive.isLandscape}}</div>
    </div>
  </div>
  <div class="col-xs-12">
    <h3>Registering a DOM element</h3>
    As of version 0.3.0 you can register a set of DOM elements which should be set whenever a change is detected. This would most likely be done in the <b>init()</b> hook, something like:

<pre><code>  init() {
    this._super(...arguments);
    run.schedule('afterRender', ()=> {
      this.get('responsive').register('foobar', '#image-container');
    });
  },</code></pre>
  <p>
    This registration means that there is now a new property available <code>responsive.registry.foobar</code> which has two properties "width" and "height". And as you're probably aware <i>async</i> can be cruel to height sometimes so when registering it will set the height immediately and then reset 50ms later if the value has changed due to content loading.
  </p>
  <p>
    If you want to deregister a DOM lookup you can do that with <code>deregister(name)</code> at any point and the service will immediately update the registry.
  </p>
  </div>
</div>
